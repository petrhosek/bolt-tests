# Check that BOLT can process Clang with no-lbr profile and the resulting Clang
# binary correctly compiles C++ source.
REQUIRES: x86_64-linux

RUN: mkdir -p %p/Output
RUN: test -f %p/Output/clang || unzstd %p/Inputs/clang.zst -o %p/Output/clang

# Collect the profile
RUN: perf record -e cycles:u -o %t.data -- \
RUN:   %p/Output/clang %p/Inputs/bf.cpp -O2 -std=c++11 -c -o %t.out

# Convert the profile
RUN: perf2bolt %p/Output/clang -p %t.data -o %t.fdata -nl \
RUN:   |& FileCheck %s -check-prefix=CHECK-P2B

# Optimize using that profile
RUN: llvm-bolt %p/Output/clang -o %t -data %t.fdata \
RUN:    -relocs -reorder-blocks=ext-tsp -split-functions=3 -split-all-cold \
RUN:    -split-eh -icf=1 -reorder-functions=hfsort+ -use-gnu-stack \
RUN:    -jump-tables=move -frame-opt=hot -peepholes=all -dyno-stats \
RUN:   |& FileCheck %s -check-prefix=CHECK-BOLT

# Check the resulting binary
RUN: %t %p/Inputs/bf.cpp -O2 -std=c++11 -c -o %t.out
RUN: cmp %p/Inputs/bf.o %t.out

CHECK-P2B:      PERF2BOLT: processing basic events (without LBR)...
CHECK-BOLT:     BOLT-INFO: pre-processing profile using branch profile reader
CHECK-BOLT:     BOLT-INFO: operating with basic samples profiling data (no LBR).
CHECK-BOLT-NOT: BOLT-INFO: 0 out of {{.*}} functions in the binary (0.0%) have non-empty execution profile
